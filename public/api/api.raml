#%RAML 0.8
baseUri: http://{apiHost}

title: shoehorn

version: VERSION

mediaType:  application/json

baseUriParameters:
  apiHost:
    enum: ["dev-shoehorn.herokuapp.com","staging-shoehorn.herokuapp.com","localhost:9000","127.0.0.1:9000"]

securitySchemes:
  - basic:
      description: http basic authentication
      type: Basic Authentication

securedBy: [basic]

resourceTypes:
  - collection:
      get:
        description: retrieves a list of **<<resourceName>>s** (all of them if no 'q' is present as query param)
        queryParameters:
          q: &q
            required: false
            description: optional query as a json expression
            example: |
              {"foo":true, "bar":2014}

      post:
        description: creates a new resource
        body:
          application/json:
            example: <<postexample>>
        responses:
            201:
              description: Created  
              headers:
                Location:
                  description: the url of the newly created **<<resourceName>>**
                  example: http://{apiHost}/<<resourceName>>s/53ecbedd1700004c00d115b1
                Shoehorn-resource-id:
                  description: the id of the newly created **<<resourceName>>**
                  example: 53ecbedd1700004c00d115b1
                        
       
  - collection-item:
      get:
        description: fetches the resource with the given id
        responses: &standardResponses
          200:
            description: OK
            body:
              application/json:
                example: <<getexample>>
          404: 
            description: NOTFOUND
      put:
        description: updates an existing resource by the given id
        body:
          application/json:
            example: <<postexample>>
        responses:
          200:
            description: OK
          400:
            description: TODO
      delete:
        description: deletes the resource with the given id


        
/catalogs:
  type: 
    collection:
      resourceName: catalog
      postexample: !include catalog.json
    
  /{id}:
    type:
      collection-item:
        getexample: !include catalog.json
        postexample: !include catalog.json
/products:
  type: 
    collection:
      resourceName: product
      postexample: !include product.json
  get:
    queryParameters:
      q: *q
#      catalogs:
#        description: |
#          json array of catalog ids.
#
#          will return those products that are part of any of the given catalogs
#        example: ["1","2","3"]

  /{id}:
    type:
      collection-item:
        getexample: !include product.json
        postexample: !include product.json

/baskets:
  type:
    collection:
      resourceName: basket
      postexample: !include basket.json
  /{id}:
    type:
      collection-item:
        getexample: !include basket.json
        postexample: !include basket.json
    delete:
      queryParameters:
        itemNumber:
          description: |
            deletes an item from the given basket (identified by path variable :id)
            with the given itemNumber
          example: 1011-22401
        size:
          description: |
            deletes an item from the given basket (identified by path variable :id)
            with the given itemNumber and size
            only allowed if itemNumber is present in the query
          example: 13

/warehouses:
  type:
    collection:
      resourceName: warehouse
      postexample: !include warehouse.json
  /{id}:
    type:
      collection-item:
        getexample: !include warehouse.json
        postexample: !include warehouse.json

/agents:
  type:
    collection:
      resourceName: agent
      postexample: !include agent.json
  /{id}:
    type:
      collection-item:
        getexample: !include agent.json
        postexample: !include agent.json

/shops:
  type:
    collection:
      resourceName: shop
      postexample: !include shop.json
  /{id}:
    type:
      collection-item:
        getexample: !include shop.json
        postexample: !include shop.json

/sizegroups:
  type:
    collection:
      resourceName: sizegroup
      postexample: !include sizegroup.json
  /{id}:
    type:
      collection-item:
        getexample: !include sizegroup.json
        postexample: !include sizegroup.json

/deadlinetypes:
  type:
    collection:
      resourceName: deadlinetype
      postexample: !include deadlinetype.json
  /{id}:
    type:
      collection-item:
        getexample: !include deadlinetype.json
        postexample: !include deadlinetype.json

/companytypes:
  type:
    collection:
      resourceName: companytype
      postexample: !include companytype.json
  /{id}:
    type:
      collection-item:
        getexample: !include companytype.json
        postexample: !include companytype.json

/addresstypes:
  type:
    collection:
      resourceName: addresstype
      postexample: !include addresstype.json
  /{id}:
    type:
      collection-item:
        getexample: !include addresstype.json
        postexample: !include addresstype.json

/districts:
  type:
    collection:
      resourceName: district
      postexample: !include district.json
  /{id}:
    type:
      collection-item:
        getexample: !include district.json
        postexample: !include district.json

/lineofbusinesses:
  type:
    collection:
      resourceName: lineofbusiness
      postexample: !include lineofbusiness.json
  /{id}:
    type:
      collection-item:
        getexample: !include lineofbusiness.json
        postexample: !include lineofbusiness.json

/variables:
  type:
    collection:
      resourceName: variable
      postexample: !include variable.json
  /{id}:
    type:
      collection-item:
        getexample: !include variable.json
        postexample: !include variable.json

